{"version":3,"sources":["Component/Deploy/Deploy.js","App.js","reportWebVitals.js","index.js"],"names":["Deploy","React","useState","name","setName","height","setHeight","email","setEmail","nameIsValid","setNameIsValid","heightIsValid","setHeightIsValid","emailIsValid","setEmailIsValid","nameErrorMessage","setNameErrorMessage","heightErrorMessage","setHeightErrorMessage","emailErrorMessage","setEmailErrorMessage","submittedStatus","setSubmittedStatus","showModel","setShowModel","Modal","closeModal","className","onClick","type","value","placeholder","onChange","e","target","trim","length","xtype","parseInt","validator","isEmail","fetch","method","headers","body","JSON","stringify","then","response","json","data","status","invalid","map","input","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.52d2a160.chunk.js","sourcesContent":["import React from 'react';\nimport validator from 'validator';\nimport xtype from 'xtypejs';\n\n//arrow functional component\nexport const Deploy = () => {\n\n\n    //create state variables to store user input\n    const [name, setName] = React.useState('');\n    const [height, setHeight] = React.useState('');\n    const [email, setEmail] = React.useState('');\n\n    //create state variables to store VALIDITY of user input\n    const [nameIsValid, setNameIsValid] = React.useState(false);\n    const [heightIsValid, setHeightIsValid] = React.useState(false);\n    const [emailIsValid, setEmailIsValid] = React.useState(false);\n\n    //create state variables to error messages\n    const [nameErrorMessage, setNameErrorMessage] = React.useState('');\n    const [heightErrorMessage, setHeightErrorMessage] = React.useState('');\n    const [emailErrorMessage, setEmailErrorMessage] = React.useState('');\n\n    //create state variables to store submit status & submit message\n    const [submittedStatus, setSubmittedStatus] = React.useState(false);\n\n    //state variable for confirmation modal\n    const [showModel, setShowModel] = React.useState(false);\n\n    //updating function for when therer is a change in text field\n    const nameChangeHandler = (e) => {\n        setName(e.target.value);\n        //check if name is less than 100 chacters, more than 0 and isn't a number\n        if (e.target.value.trim().length > 100 || e.target.value.trim().length === 0 || xtype.type(parseInt(e.target.value)) === 'number') {\n            setNameIsValid(false);\n            setNameErrorMessage(\"You have entered an invalid name. Please enter a valid name.\")\n        } else {\n            setNameIsValid(true);\n        }\n    }\n\n    //updating function for when therer is a change in text field\n    const heightChangeHandler = (e) => {\n        setHeight(e.target.value);\n        //check if height is a positive interger\n        if (xtype.type(parseInt(e.target.value)) !== 'number' || parseInt(e.target.value) < 1) {\n            setHeightIsValid(false);\n            setHeightErrorMessage(\"You have entered an invalid height. Please enter a valid height.\")\n        } else {\n            setHeightIsValid(true);\n        }\n    }\n\n    //updating function for when therer is a change in text field\n    const emailChangeHandler = (e) => {\n        setEmail(e.target.value);\n        //check if email has a valid format\n        if (!validator.isEmail(e.target.value.trim())) {\n            setEmailIsValid(false);\n            setEmailErrorMessage(\"You have entered an invalid email. Please enter a valid email.\")\n        } else {\n            setEmailIsValid(true);\n        }\n    }\n\n    //create modal functional component to display confirmation\n    function Modal({ closeModal }) {\n        return (\n            <div className=\"modal\">\n                <div className=\"modal2\">\n                    <p className=\"modalBody\"> An email has been sent with your height. </p>\n                    <button className=\"modalButton\" onClick={() => {closeModal(false); setName(\"\"); setHeight(\"\"); setEmail(\"\")} }\n                    > Close </button>\n                </div>\n            </div>\n        );\n    }\n\n    const submitFunc = () => {\n\n        // if input is valid \n        if (nameIsValid === true && heightIsValid === true && emailIsValid === true) {\n            //create a fetch request for the submit button\n            fetch('/api', {\n                method: 'POST', //request protocol\n                headers: { 'Content-Type': 'application/json' }, //format of data\n                body: JSON.stringify({ name, email, height }) //data being sent\n            })\n                .then(response => response.json())\n                .then(data => {\n                    if (data.status === 'success') {\n                        setSubmittedStatus(true);\n                        //open confirmation page\n                        setShowModel(true)\n                    } else {\n                        setSubmittedStatus(false);\n                        data.invalid.map((input) => {\n                            if (input === 'name') {\n                                setNameIsValid(false);\n                            }\n                            else if (input === 'height') {\n                                setHeightIsValid(false);\n                            }\n                            else if (input === 'email') {\n                                setEmailIsValid(false);\n                            }\n                        });\n                    }\n                }); //.then(response => response.json().then(data => {console.log(data)}));  \n        }\n    }\n\n    return (<div className=\"container1\">\n\n            {/*Display submit message if input is submitted */}\n            {submittedStatus === true && showModel === true ?\n                <>\n                    <Modal closeModal={setShowModel} />\n                </>\n                : null\n            }\n\n            <div className=\"container2\">\n\n                <header>\n                    <h1 className=\"title\">Please Enter Your Height</h1>\n                </header>\n\n\n                <div className=\"container3\">\n                    <p className=\"label\">Name</p>\n                    <input type=\"text\" value={name} className='textField' placeholder=\"Enter your name\" onChange={nameChangeHandler} />\n                    {/*Display Error message if there's an error */}\n                    {!nameIsValid && nameErrorMessage !== '' ?\n                        <>\n                            <p className=\"errorMessage\"> {nameErrorMessage} </p>\n                        </>\n                        : null\n                    }\n                </div>\n\n                <div className=\"container3\">\n                    <p className=\"label\">Height (cm)</p>\n                    <input type=\"number\" value={height} className='textField' placeholder=\"Enter your height\" onChange={heightChangeHandler} />\n                    {/*Display Error message if there's an error */}\n                    {!heightIsValid && heightErrorMessage !== '' ?\n                        <>\n                            <p className=\"errorMessage\"> {heightErrorMessage} </p>\n                        </>\n                        : null\n                    }\n                </div>\n\n                <div className=\"container3\">\n                    <p className=\"label\">Email</p>\n                    <input type=\"email\" value={email} className='textField' placeholder=\"Enter your email\" onChange={emailChangeHandler} />\n                    {/*Display Error message if there's an error */}\n                    {!emailIsValid && emailErrorMessage !== '' ?\n                        <>\n                            <p className=\"errorMessage\"> {emailErrorMessage} </p>\n                        </>\n                        : null\n                    }\n                </div>\n\n                <button onClick={submitFunc} className='btn'>Submit</button>\n\n            </div>\n        </div>)\n\n}","import './App.css';\nimport{Deploy} from './Component/Deploy/Deploy'\n\n//create functional component of App\nfunction App() {\n  return (\n    <div className=\"Container\">\n      <Deploy/> {/*create an instance of all components (deploy component)*/}\n    </div>\n  );\n}\n\nexport default App; //allow functional component to be exported to other files (index.js)\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n//Allow for items to be rendered render(what,where)\nReactDOM.render(\n  /*React's StrictMode is sort of a helper component that will:\n  * Verify that the components inside are following some of the recommended practices and warn you if not in the console.\n  * Verify the deprecated methods are not being used, and if they're used strict mode will warn you in the console.\n  * Help you prevent some side effects by identifying potential risks.\n  */\n  <React.StrictMode>\n    <App />  {/*create an instance of the app to be rendered */}\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}